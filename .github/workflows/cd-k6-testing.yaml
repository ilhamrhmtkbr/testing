name: K6 Testing

on:
  workflow_call:

jobs:
  k6-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Step 1: Generate shared secrets untuk semua container
      - name: Generate Shared Environment Variables
        run: |
          echo "🔧 Generating shared environment variables..."

          # Generate APP_KEY (Laravel format)
          APP_KEY="base64:$(openssl rand -base64 32)"
          echo "Generated APP_KEY: $APP_KEY"

          # Generate JWT_SECRET (untuk semua container)
          JWT_SECRET=$(openssl rand -base64 64)
          echo "Generated JWT_SECRET: $JWT_SECRET"

          # Generate REVERB secrets (untuk user & forum)
          REVERB_APP_ID="cd-$(date +%s)"
          REVERB_APP_KEY="cd-key-$(openssl rand -hex 8)"
          REVERB_APP_SECRET="cd-secret-$(openssl rand -base64 32)"

          # Save ke environment variables untuk step berikutnya
          echo "APP_KEY=$APP_KEY" >> $GITHUB_ENV
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV
          echo "REVERB_APP_ID=$REVERB_APP_ID" >> $GITHUB_ENV
          echo "REVERB_APP_KEY=$REVERB_APP_KEY" >> $GITHUB_ENV
          echo "REVERB_APP_SECRET=$REVERB_APP_SECRET" >> $GITHUB_ENV

      # Step 2: Create environment files dengan generated secrets
      - name: Create Environment Files
        run: |
          echo "📝 Creating environment files with generated secrets..."
          cd docker/prod

          # Shared environment untuk semua backend
          mkdir -p backend-laravel/_shared
          cat > backend-laravel/_shared/.env.shared << EOF
          APP_NAME=iamra.course
          APP_ENV=testing
          APP_DEBUG=true
          APP_TIMEZONE=Asia/Jakarta
          APP_KEY=$APP_KEY

          BCRYPT_ROUNDS=10
          PHP_CLI_SERVER_WORKERS=4

          DB_CONNECTION=mysql
          DB_HOST=database-mysql
          DB_PORT=3306
          DB_DATABASE=iamra_course_test
          DB_USERNAME=root
          DB_PASSWORD=root

          DB_CONNECTION_SECOND=mongodb
          DB_HOST_SECOND=database-mongo
          DB_PORT_SECOND=27017
          DB_DATABASE_SECOND=iamra_course
          DB_USERNAME_SECOND=
          DB_PASSWORD_SECOND=
          DB_AUTHENTICATION_DATABASE_SECOND=iamra

          SESSION_DRIVER=redis
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=null

          QUEUE_CONNECTION=redis

          CACHE_DRIVER=redis
          CACHE_STORE=redis
          CACHE_PREFIX=

          REDIS_CLIENT=phpredis
          REDIS_HOST=database-redis
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          REDIS_PREFIX=

          # JWT Secret yang sama untuk semua container
          JWT_SECRET=$JWT_SECRET

          USER_API_VERSION=user-api/v1
          STUDENT_API_VERSION=student-api/v1
          INSTRUCTOR_API_VERSION=instructor-api/v1
          PUBLIC_API_VERSION=public-api/v1
          FORUM_API_VERSION=forum-api/v1

          EOF

          echo "✅ All environment files created with shared secrets!"

      # Step 3: Start Docker dengan environment files yang udah dibuat
      - name: Start Docker Services
        run: |
          cd docker/prod

          echo "🚀 Starting Docker services..."

          # Start databases dulu
          sudo docker compose -f docker-compose-cd-k6-test.yaml up -d database-mysql database-redis
          echo "⏳ Waiting for databases..."
          sleep 45

          # Start user API dulu (most important)
          sudo docker compose -f docker-compose-cd-k6-test.yaml up -d backend-api-user
          echo "⏳ Waiting for user API..."
          sleep 30

          # Start services yang depend ke user API
          sudo docker compose -f docker-compose-cd-k6-test.yaml up -d backend-api-public
          echo "⏳ Waiting for all APIs..."
          sleep 45

          # Check if all containers are running
          sudo docker compose -f docker-compose-cd-k6-test.yaml ps

      # Step 4: Setup Laravel applications
      - name: Setup Laravel Applications
        run: |
          cd docker/prod
          sudo docker compose -f docker-compose-cd-k6-test.yaml exec -T backend-api-public php artisan migrate:fresh --seed

      # Step 5: Debug and Test Services
      - name: Debug Services Before Tests
        run: |
          cd docker/prod
          echo "🔍 Debugging all services..."

          # Check container status
          echo "---- Container Status ----"
          sudo docker compose -f docker-compose-cd-k6-test.yaml ps

          echo "---- Network Information ----"
          sudo docker network ls

      # Step 6: Run K6 Tests
      - name: Run K6 Tests
        run: |
          cd docker/prod

          echo "🧪 Running k6 tests..."

          # Test dalam urutan dependency
          echo "Testing backend-api-user (base service)..."
          sudo docker compose -f docker-compose-cd-k6-test.yaml run --rm set-k6 run /k6-scripts/test/login.js
#          sudo docker compose -f docker-compose-cd-k6-test.yaml run --rm set-k6 run /k6-scripts/test/public.js
#          sudo docker compose -f docker-compose-cd-k6-test.yaml run --rm set-k6 run /k6-scripts/test/register.js

          echo "✅ All k6 tests passed!"

      # Step 7: Cleanup
      - name: Cleanup Docker
        if: always()
        run: |
          cd docker/prod
          sudo docker compose -f docker-compose-cd-k6-test.yaml down -v --remove-orphans
          sudo docker system prune -f