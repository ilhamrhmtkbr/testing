name: Deploy to AWS Free Tier EC2

on:
  workflow_call:

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: ilhamrhmtkbr/iamra-course

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Generate Secrets
        id: secrets
        run: |
          JWT_SECRET=$(openssl rand -base64 64)
          APP_KEY="base64:$(openssl rand -base64 32)"
          BUILD_TAG="build-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"

          echo "jwt_secret=$JWT_SECRET" >> $GITHUB_OUTPUT
          echo "app_key=$APP_KEY" >> $GITHUB_OUTPUT
          echo "build_tag=$BUILD_TAG" >> $GITHUB_OUTPUT

          echo "::add-mask::$JWT_SECRET"
          echo "::add-mask::$APP_KEY"

      - name: Build React Applications
        env:
          VITE_API_KEY_OPEN_CAGE_DATA: ${{ secrets.VITE_API_KEY_OPEN_CAGE_DATA }}
          VITE_CLIENT_GOOGLE: ${{ secrets.VITE_CLIENT_GOOGLE }}
        run: |
          echo "Building React applications..."

          FRONTENDS=("user" "instructor" "student" "public" "forum")

          for frontend in "${FRONTENDS[@]}"; do
            if [ -d "frontend-$frontend" ]; then
              echo "Building frontend-$frontend..."
              cd "frontend-$frontend"
              cp ../docker/prod/frontend-react/.env.shared .env

              # Install dependencies
              npm ci --silent --prefer-offline

              npm install terser --prefer-offline --save-dev

              # Build with memory optimization
              NODE_OPTIONS="--max-old-space-size=4096" npm run build

              # Verify build
              if [ ! -d "dist" ]; then
                echo "Build failed for frontend-$frontend"
                exit 1
              fi

              cd ..
            fi
          done

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug Docker Credentials
        run: |
          echo "Username length: ${#DOCKER_USERNAME}"
          echo "Password length: ${#DOCKER_PASSWORD}"
          echo "Username starts with: ${DOCKER_USERNAME:0:3}..."
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Create Production Environment File
        run: |
          cat > .env.secret-shared << 'EOF'
          APP_KEY=${{ steps.secrets.outputs.app_key }}
          DB_HOST=${{ secrets.RDS_HOST }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          LOG_SLACK_WEBHOOK_URL=${{ secrets.LOG_SLACK_WEBHOOK_URL }}
          DB_DSN_PROD_SECOND=${{ secrets.DB_DSN_PROD_SECOND }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          JWT_SECRET=${{ steps.secrets.outputs.jwt_secret }}
          EOF

          cat > .env.secret-user << 'EOF'
          APP_URL=https://api-user.course.iamra.site
          AUTH_GUARD=api
          JWT_COOKIE_DOMAIN_PROD=.iamra.site
          BROADCAST_CONNECTION=reverb
          REVERB_APP_ID=${{ secrets.USER_REVERB_APP_ID }}
          REVERB_APP_KEY=${{ secrets.USER_REVERB_APP_KEY }}
          REVERB_APP_SECRET=${{ secrets.USER_REVERB_APP_SECRET }}
          REVERB_HOST=backend-api-user-reverb
          REVERB_PORT=8080
          REVERB_SCHEME=http
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          EOF

          cat > .env.secret-student << 'EOF'
          APP_URL=https://api-student.course.iamra.site
          MIDTRANS_URL=${{ secrets.MIDTRANS_URL }}
          MIDTRANS_CORE_API_URL=${{ secrets.MIDTRANS_CORE_API_URL }}
          MIDTRANS_CLIENT_KEY=${{ secrets.MIDTRANS_CLIENT_KEY }}
          MIDTRANS_SERVER_KEY=${{ secrets.MIDTRANS_SERVER_KEY }}
          MIDTRANS_IS_PRODUCTION=${{ secrets.MIDTRANS_IS_PRODUCTION }}
          MIDTRANS_IS_SANITIZED=${{ secrets.MIDTRANS_IS_SANITIZED }}
          MIDTRANS_IS_3DS=${{ secrets.MIDTRANS_IS_3DS }}
          EOF

          cat > .env.secret-instructor << 'EOF'
          APP_URL=https://api-instructor.course.iamra.site
          MIDTRANS_URL=${{ secrets.MIDTRANS_URL }}
          MIDTRANS_CORE_API_URL=${{ secrets.MIDTRANS_CORE_API_URL }}
          MIDTRANS_CREATOR_KEY=${{ secrets.MIDTRANS_CREATOR_KEY }}
          MIDTRANS_APPROVER_KEY=${{ secrets.MIDTRANS_APPROVER_KEY }}
          MIDTRANS_CLIENT_KEY=${{ secrets.MIDTRANS_CLIENT_KEY }}
          MIDTRANS_SERVER_KEY=${{ secrets.MIDTRANS_SERVER_KEY }}
          MIDTRANS_IS_PRODUCTION=${{ secrets.MIDTRANS_IS_PRODUCTION }}
          MIDTRANS_IS_SANITIZED=${{ secrets.MIDTRANS_IS_SANITIZED }}
          MIDTRANS_IS_3DS=${{ secrets.MIDTRANS_IS_3DS }}
          EOF

          cat > .env.secret-public << 'EOF'
          APP_URL=https://api-public.course.iamra.site
          EOF

          cat > .env.secret-forum << 'EOF'
          APP_URL=https://api-forum.course.iamra.site
          BROADCAST_CONNECTION=reverb
          REVERB_APP_ID=${{ secrets.FORUM_REVERB_APP_ID }}
          REVERB_APP_KEY=${{ secrets.FORUM_REVERB_APP_KEY }}
          REVERB_APP_SECRET=${{ secrets.FORUM_REVERB_APP_SECRET }}
          REVERB_HOST=backend-api-forum-reverb
          REVERB_PORT=8080
          REVERB_SCHEME=http
          EOF

      - name: Build and Push Images
        run: |
          # Create Nginx Dockerfile
          cat > Dockerfile.nginx << 'EOF'
          FROM nginx:1.25-alpine

          # Install required packages
          RUN apk add --no-cache \
          certbot \
          openssl \
          curl \
          supervisor \
          && rm -rf /var/cache/apk/*
          
          # Setup directories first
          RUN mkdir -p /var/cache/nginx/static \
          /var/cache/nginx/api \
          /var/www/html/forum \
          /var/www/html/user \
          /var/www/html/instructor \
          /var/www/html/student \
          /var/www/html/public \
          /var/www/certbot \
          /var/log/supervisor && \
          chown -R nginx:nginx /var/cache/nginx /var/www/html /var/www/certbot
          
          # Copy frontend builds
          COPY frontend-user/dist /var/www/html/user
          COPY frontend-instructor/dist /var/www/html/instructor
          COPY frontend-student/dist /var/www/html/student
          COPY frontend-public/dist /var/www/html/public
          COPY frontend-forum/dist /var/www/html/forum
          
          # Set proper permissions
          RUN chown -R nginx:nginx /var/www/html
          
          EXPOSE 80 443
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF

          # Build and push Nginx
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.nginx \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:${{ steps.secrets.outputs.build_tag }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:latest \
            --push .

          # Build backend services
          SERVICES=("user" "instructor" "student" "forum" "public")

          for service in "${SERVICES[@]}"; do
            if [ -f "docker/prod/backend-laravel/${service}/Dockerfile.api-${service}" ]; then
              echo "Building ${service}..."

              docker buildx build \
                --platform linux/amd64 \
                --file docker/prod/backend-laravel/${service}/Dockerfile.api-${service} \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:${{ steps.secrets.outputs.build_tag }} \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${service}:latest \
                --push .
            fi
          done

          docker buildx build \
            --platform linux/amd64 \
            --file docker/prod/backend-laravel/user/Dockerfile.api-user-reverb \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user-reverb:${{ steps.secrets.outputs.build_tag }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user-reverb:latest \
            --push .

          docker buildx build \
            --platform linux/amd64 \
            --file docker/prod/backend-laravel/forum/Dockerfile.api-forum-reverb \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-forum-reverb:${{ steps.secrets.outputs.build_tag }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-forum-reverb:latest \
            --push .

      - name: Create Docker Compose for Production
        env:
          BUILD_TAG: ${{ steps.secrets.outputs.build_tag }}
        run: |
          cat > docker-compose.yml << 'EOF'
          services:
            nginx:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-nginx:${BUILD_TAG}
              container_name: nginx
              ports:
                - "80:80"
                - "443:443"
              depends_on:
                - database-redis
              volumes:
                - ./letsencrypt:/etc/letsencrypt:rw
                - ./certbot:/var/www/certbot:rw
                - ./nginx-http.conf:/etc/nginx/nginx.conf:ro
                - ./sockets:/var/run/sockets
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 48M
                    cpus: '0.05'

            backend-api-user:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user:${BUILD_TAG}
              container_name: backend-api-user
              env_file:
                - .env.secret-shared
                - .env.secret-user
              depends_on:
                - database-redis
              volumes:
                - ./sockets:/var/run/sockets
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 110M
                    cpus: '0.15'

            backend-api-user-reverb:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-user-reverb:${BUILD_TAG}
              container_name: backend-api-user-reverb
              env_file:
                - .env.secret-shared
                - .env.secret-user
              depends_on:
                - database-redis
              networks:
                - app-network
              restart: unless-stopped
              expose : 
                - "8080"
              deploy:
                resources:
                  limits:
                    memory: 80M
                    cpus: '0.1'

            backend-api-public:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-public:${BUILD_TAG}
              container_name: backend-api-public
              env_file:
                - .env.secret-shared
                - .env.secret-public
              depends_on:
                - database-redis
              volumes:
                - ./sockets:/var/run/sockets              
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 107M
                    cpus: '0.1'

            backend-api-student:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-student:${BUILD_TAG}
              container_name: backend-api-student
              env_file:
                - .env.secret-shared
                - .env.secret-student
              depends_on:
                - database-redis
              volumes:
                - ./sockets:/var/run/sockets
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 80M
                    cpus: '0.1'

            backend-api-instructor:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-instructor:${BUILD_TAG}
              container_name: backend-api-instructor
              env_file:
                - .env.secret-shared
                - .env.secret-instructor
              depends_on:
                - database-redis
              volumes:
                - ./sockets:/var/run/sockets
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 80M
                    cpus: '0.1'

            backend-api-forum:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-forum:${BUILD_TAG}
              container_name: backend-api-forum
              env_file:
                - .env.secret-shared
                - .env.secret-forum
              depends_on:
                - database-redis
              volumes:
                - ./sockets:/var/run/sockets
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 90M
                    cpus: '0.1'

            backend-api-forum-reverb:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-forum-reverb:${BUILD_TAG}
              container_name: backend-api-forum-reverb
              env_file:
                - .env.secret-shared
                - .env.secret-forum
              depends_on:
                - database-redis
              networks:
                - app-network
              restart: unless-stopped
              expose : 
                - "8080"
              deploy:
                resources:
                  limits:
                    memory: 80M
                    cpus: '0.1'

            database-redis:
              image: redis:7.2-alpine
              container_name: database-redis
              command: >
                redis-server
                --maxmemory 64mb
                --maxmemory-policy allkeys-lru
                --save 900 1
                --appendonly yes
              volumes:
                - redis_data:/data
              networks:
                - app-network
              restart: unless-stopped
              deploy:
                resources:
                  limits:
                    memory: 40M
                    cpus: '0.05'
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 5s
                retries: 3

          volumes:
            redis_data:

          networks:
            app-network:
              driver: bridge
          EOF

          # Replace BUILD_TAG placeholder
          sed -i "s/\${BUILD_TAG}/$BUILD_TAG/g" docker-compose.yml

      - name: Create Deployment Script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }
          
          log "Starting deployment process..."

          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            log "Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl enable docker
            sudo systemctl start docker
            rm get-docker.sh

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" \
              -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            log "Docker installed successfully"
          fi

          mkdir -p ./sockets
          chmod 777 ./sockets

          # Fix Docker permissions
          sudo chmod 666 /var/run/docker.sock

          # Login to Docker Hub
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

          # Clean up old containers and images
          log "Cleaning up old resources..."

          # Stop services gracefully if they exist
          if [ -f "docker-compose.yml" ]; then
            docker-compose down --remove-orphans 2>/dev/null || true
          fi
          
          # Clean up containers
          docker stop $(docker ps -aq) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true

          # Clean up unused resources
          docker system prune -af --volumes
          docker volume prune -f

          # Pull new images
          log "Pulling latest images..."
          docker-compose pull

          # Start services sequentially (optimized for 1GB RAM)
          log "Starting services..."

          # 1. Start Redis first
          log "Starting Redis..."
          docker-compose up -d database-redis
          
          # Verify Redis is ready
          for i in {1..15}; do
            if docker-compose exec -T database-redis redis-cli ping 2>/dev/null | grep -q PONG; then
              log "Redis is ready"
              break
            fi
            if [ $i -eq 15 ]; then
              log "Redis failed to start"
              exit 1
            fi
            sleep 2
          done
          
          # 2. Start lightweight services first
          LIGHTWEIGHT_SERVICES=("backend-api-public")
          for service in "${LIGHTWEIGHT_SERVICES[@]}"; do
            log "Starting $service..."
            docker-compose up -d $service
            sleep 10
          done
          
          # 3. Start main services
          MAIN_SERVICES=("backend-api-user" "backend-api-student" "backend-api-instructor" "backend-api-forum")
          for service in "${MAIN_SERVICES[@]}"; do
            log "Starting $service..."
          
            docker-compose up -d $service
          
            # Extra wait for heavy services
            if [[ "$service" == "backend-api-user" ]]; then
              sleep 20
            else
              sleep 15
            fi
          done
          
          # 4. Start Reverb services (WebSocket services)
          REVERB_SERVICES=("backend-api-user-reverb" "backend-api-forum-reverb")
          for service in "${REVERB_SERVICES[@]}"; do
            log "Starting $service..."
            docker-compose up -d $service
            sleep 10
          done
          
          # 5. Start Nginx last
          log "Starting Nginx..."
          docker-compose up -d nginx
          
          # Final health check
          log "Performing final health check..."
          sleep 30
          
          for service in database-redis backend-api-public backend-api-user backend-api-student backend-api-instructor backend-api-forum backend-api-user-reverb backend-api-forum-reverb nginx; do
            if docker-compose ps | grep -q "$service.*Up"; then
              log "✓ $service is running"
            else
              log "✗ $service failed to start"
            fi
          done
          
          log "All services are now running!"

          EOF

          chmod +x deploy.sh

      - name: Create SSL Setup Script
        run: |
          cat > setup-ssl.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
          }

          log "Starting SSL certificate setup..."
          log "Make sure your domains are pointing to this server before running!"

          # Check if certificates already exist
          if [ -f "letsencrypt/live/course.iamra.site/fullchain.pem" ]; then
            log "SSL certificates already exist. Skipping certificate generation."
            log "Switching to HTTPS configuration..."
          else
            log "Obtaining SSL certificates..."

            # Stop nginx temporarily
            docker-compose stop nginx
          
            # Wait a moment for port 80 to be free
              sleep 5

            # Get certificates using standalone mode
            docker run --rm \
              -v "$PWD/letsencrypt:/etc/letsencrypt" \
              -v "$PWD/certbot:/var/www/certbot" \
              -p 80:80 \
              certbot/certbot certonly \
              --standalone \
              --email ilhamrhmtkbr@iamra.site \
              --agree-tos \
              --no-eff-email \
              --expand \
              -d course.iamra.site \
              -d forum.course.iamra.site \
              -d user.course.iamra.site \
              -d student.course.iamra.site \
              -d instructor.course.iamra.site \
              -d api-public.course.iamra.site \
              -d api-forum.course.iamra.site \
              -d api-user.course.iamra.site \
              -d api-student.course.iamra.site \
              -d api-instructor.course.iamra.site

            if [ $? -eq 0 ]; then
              log "SSL certificates obtained successfully!"
            else
              log "Failed to obtain SSL certificates. Check your domain DNS settings."
              log "Continuing with HTTP configuration..."
              docker-compose start nginx
              exit 1
            fi
          fi

          # Stop nginx to update config
          docker-compose stop nginx

          # Replace nginx config volume
          sed -i 's|./nginx-http.conf:/etc/nginx/nginx.conf:ro|./nginx-https.conf:/etc/nginx/nginx.conf:ro|' docker-compose.yml

          # Start nginx with new HTTPS config
          docker-compose up -d nginx

          log "SSL setup completed successfully!"
          log "All services are now running with HTTPS!"
          EOF

          chmod +x setup-ssl.sh

      - name: Deploy to EC2
        env:
          AWS_EC2_HOST: ${{ secrets.AWS_EC2_HOST }}
          AWS_EC2_USERNAME: ${{ secrets.AWS_EC2_USERNAME }}
          AWS_EC2_PRIVATE_KEY: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$AWS_EC2_PRIVATE_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H $AWS_EC2_HOST >> ~/.ssh/known_hosts

          # Test connection
          ssh -i ~/.ssh/ec2_key.pem -o ConnectTimeout=10 $AWS_EC2_USERNAME@$AWS_EC2_HOST "echo 'Connection successful'"

          # Upload files
          echo "Uploading deployment files..."
          scp -i ~/.ssh/ec2_key.pem -o ConnectTimeout=30 \
            docker-compose.yml \
            .env.secret-shared .env.secret-user .env.secret-public .env.secret-student .env.secret-instructor .env.secret-forum \
            deploy.sh \
            setup-ssl.sh \
            docker/prod/laravel-optimize.sh \
            docker/prod/server-entrypoint/nginx-http.conf \
            docker/prod/server-entrypoint/nginx-https.conf \
            $AWS_EC2_USERNAME@$AWS_EC2_HOST:~/

          # Execute deployment
          echo "Executing deployment on EC2..."
          ssh -i ~/.ssh/ec2_key.pem -o ConnectTimeout=30 -o ServerAliveInterval=30 $AWS_EC2_USERNAME@$AWS_EC2_HOST << ENDSSH

          # Set environment variables
          export DOCKER_USERNAME="$DOCKER_USERNAME"
          export DOCKER_PASSWORD="$DOCKER_PASSWORD"
          export IMAGE_PREFIX="$IMAGE_PREFIX"

          # Make scripts executable and run
          chmod +x ~/deploy.sh ~/laravel-optimize.sh
          ~/deploy.sh

          ENDSSH

          echo "Deployment completed!"