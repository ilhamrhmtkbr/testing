<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\TestCase;
use Tests\utils\Helper;

class RegisterTest extends TestCase
{
    private static string $url;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::$url = config('api.version') . '/auth';
    }

    function test_user_berhasil_register()
    {
        $res = $this->postJson(self::$url . '/register', [
            'first_name' => 'Ilham',
            'middle_name' => 'Rahmat',
            'last_name' => 'Akbar',
            'username' => 'ilhamrhmtkbrr',
            'password' => 'Ilham123!',
            'password_confirmation' => 'Ilham123!'
        ]);

        $res->assertStatus(200)
            ->assertJson([
                "success" => true,
                "message" => "Login successfully"
            ]);

        Helper::deleteUser('ilhamrhmtkbrr');
    }

    function test_user_gagal_register_karena_data_sudah_ada()
    {
        Helper::insertUser();

        $res = $this->postJson(self::$url . '/register', [
            'first_name' => 'Ilham',
            'middle_name' => 'Rahmat',
            'last_name' => 'Akbar',
            'username' => Helper::USERNAME,
            'password' => Helper::PASSWORD,
            'password_confirmation' => Helper::PASSWORD
        ]);

        $res->assertStatus(409)
            ->assertJson([
                "success" => false,
                "message" => "User exists"
            ]);

        Helper::deleteUser();
    }

    function test_user_gagal_register_karena_tidak_mengirim_data_apapun()
    {
        $res = $this->postJson(self::$url . '/register', [
            'first_name' => '',
            'middle_name' => '',
            'last_name' => '',
            'username' => '',
            'password' => '',
            'password_confirmation' => ''
        ]);

        $res->assertStatus(422)
            ->assertJson([
                "success" => false,
                "message" => "Validation failed"
            ])
            ->assertJsonFragment([
                "first_name" => ["The first name field is required."],
                "middle_name" => ["The middle name field is required."],
                "last_name" => ["The last name field is required."],
                "username" => ["The username field is required."],
                "password" => ["The password field is required."]
            ]);

    }
}
